config = configuration_data({
  'HAVE_SDL_MIXER': sdlmixer.found(),
  'HAVE_SDL_NET': sdlnet.found(),
})
config.set_quoted('DATADIR', get_option('prefix') / gl_117_datadir)
config.set_quoted('PACKAGE_VERSION', meson.project_version())
config_h = configure_file(
  input: 'config.h.in',
  output: 'config.h',
  configuration: config
)

gl_117_sources = [
  'game/Game.cpp',
  'game/GameState.cpp',
  'game/Callbacks.cpp',
  'cockpit/Cockpit.cpp',
  'configuration/ConfigFile.cpp',
  'configuration/Configuration.cpp',
  'configuration/Directory.cpp',
  'configuration/OptionFile.cpp',
  'configuration/OptionFileFactory.cpp',
  'effects/BlackSmoke.cpp',
  'effects/Explosion.cpp',
  'effects/Flash.cpp',
  'effects/Font.cpp',
  'effects/HighClouds.cpp',
  'effects/Smoke.cpp',
  'effects/Star.cpp',
  'filetokenizer/FileTokenizer.cpp',
  'gllandscape/GlLandscape.cpp',
  'landscape/Landscape.cpp',
  'loadbitmap/Bitmap.cpp',
  'loadbitmap/BitmapFactory.cpp',
  'loadbitmap/LoadTga.cpp',
  'loadmodel/BinaryFile3ds.cpp',
  'loadmodel/Load3ds.cpp',
  'loadmodel/LoadObj.cpp',
  'loadmodel/Model3dFactory.cpp',
  'loadmodel/TextFileObj.cpp',
  'loadmodel/Model3dRegistry.cpp',
  'logging/Logging.cpp',
  'menu/Button.cpp',
  'menu/Component.cpp',
  'menu/Component.h',
  'menu/Container.cpp',
  'menu/EditField.cpp',
  'menu/EditJoystick.cpp',
  'menu/EditKey.cpp',
  'menu/Label.cpp',
  'menu/TextField.cpp',
  'net/Client.cpp',
  'net/Server.cpp',
  'net/net.cpp',
  'opengl/Frustum.cpp',
  'opengl/GlPrimitives.cpp',
  'opengl/VertexArray.cpp',
  'pilot/Pilot.cpp',
  'pilot/PilotList.cpp',
  'pilot/TeamPilot.cpp',
  'sound/SoundSystem.cpp',
  'sound/WaveFile.cpp',
  'mission/MapLoader.cpp',
  'mission/MissionDemo1.cpp',
  'mission/MissionShip1.cpp',
  'mission/MissionAirBattle.cpp',
  'mission/MissionDepot.cpp',
  'mission/MissionShip2.cpp',
  'mission/MissionBase.cpp',
  'mission/MissionDogfight1.cpp',
  'mission/MissionShip3.cpp',
  'mission/MissionCanyon1.cpp',
  'mission/MissionDogfight2.cpp',
  'mission/MissionTank1.cpp',
  'mission/MissionCanyon2.cpp',
  'mission/MissionDogfight3.cpp',
  'mission/MissionTeamBase1.cpp',
  'mission/MissionCanyon3.cpp',
  'mission/MissionFreeFlight1.cpp',
  'mission/MissionTest1.cpp',
  'mission/MissionConvoy2.cpp',
  'mission/MissionGround1.cpp',
  'mission/MissionTest2.cpp',
  'mission/MissionConvoy.cpp',
  'mission/MissionMoonBase1.cpp',
  'mission/MissionTransport.cpp',
  'mission/Mission.cpp',
  'mission/MissionMoonBattle.cpp',
  'mission/MissionTunnel1.cpp',
  'mission/MissionDeathMatch1.cpp',
  'mission/MissionMoonDefense1.cpp',
  'mission/MissionTutorial1.cpp',
  'mission/MissionDeathMatch2.cpp',
  'mission/MissionMoonDogfight1.cpp',
  'mission/MissionTutorial2.cpp',
  'mission/MissionDeathMatch3.cpp',
  'mission/MissionMultiDogfight1.cpp',
  'mission/MissionTutorial3.cpp',
  'mission/MissionDefend1.cpp',
  'mission/MissionScout.cpp',
  'mission/MissionWaves1.cpp',
  'model3d/Color.cpp',
  'model3d/Object3d.cpp',
  'model3d/Space.cpp',
  'model3d/SpherePart.cpp',
  'model3d/Vector2.cpp',
  'model3d/Material.cpp',
  'model3d/Quad.cpp',
  'model3d/SpaceObj.cpp',
  'model3d/Texture.cpp',
  'model3d/Vector3.cpp',
  'model3d/Transformation.cpp',
  'model3d/Model3d.cpp',
  'model3d/Rotation.cpp',
  'model3d/Sphere.cpp',
  'model3d/Triangle.cpp',
  'model3d/Vertex.cpp',
  'aiobject/AiObj.cpp',
  'aiobject/DynamicObj.cpp',
  'aiobject/Fighter.cpp',
  'aiobject/Missile.cpp',
  'aiobject/Ship.cpp',
  'aiobject/StaticAa.cpp',
  'aiobject/StaticPassive.cpp',
  'aiobject/Tank.cpp',
  'aiobject/UnitDescriptor.cpp',
  'aiobject/UnitDescriptorRegistry.cpp',
  'aiobject/DynamicObjPrototype.cpp',
  'aiobject/AiObjPrototype.cpp',
  'aiobject/FighterPrototype.cpp',
  'render/Render.cpp',
  'shader/GlShaders.cpp',
  'util/StringUtil.cpp',
  'util/Math.cpp'
]

executable(
  'gl-117',
  gl_117_sources,
  dependencies: [
    sdl,
    sdlmixer,
    sdlnet,
    gl,
    glu,
  ],
  install: true,
  install_dir: get_option('bindir')
)
